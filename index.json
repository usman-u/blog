[{"content":"Logical Overview Network Infrastructure Breakdown: My network mainly consists of two Ubiquiti EdgeRouter Xs, two Cisco Catalyst switches, and cloud VPSs.\nWireGuard is used as the VPN tunneling protocol, to connect sites and VPS Instances.\nDN42 BGP: I\u0026rsquo;m a member of the DN42 BGP project.\nfr-lil1, uk-lon1, us-west1 act as the eBGP edge routers, peering peering with various providers, and allowing access the to the DN42 private network. iBGP between fr-lil1, uk-lon1 \u0026amp; us-west1 (exchanging only external DN42 BGP routes). Prefixes from eBGP peers are filtered using RPKI-ROA (docker), such that invalid prefixed are removed. See my other post for more info. OSPF:\nOSPF area 0 between erx.usman, erx.zahid \u0026amp; fr-lil1 (advertising only internal routes). fr-lil1 is the OSPF ABR. OSPF area 1 between fr-lil1, uk-lon1 \u0026amp; us-west1. Using MultiArea OSPF, so that a full DN42 BGP route table isn\u0026rsquo;t redistributed into OSPF. 172.20.0.0/14 is summarised into area 0, at the OSPF ABR (fr-lil1). Source NAT on erx.usman \u0026amp; erx.zahid, such that traffic destined for DN42 services (172.20.0.0/14), is translated into a DN42 IP (from my range).\nAuthoritative DNS records (for the .lan TLD) are running on pi.usman.lan \u0026amp; plex.usman.lan, as Unbound Docker Containers.\nPartly deployed using Drone CI/CD and my own Python Configuration Management Framework.\nSee github.com/usman-u/network-automation and github.com/usman-u/usmannet for more info.\nLibreNMS Weathermap Click here to see a live version of the weathermap.\nMore Info: My Home LAN Ubiquiti Edgerouter X - erx.usman.lan\nWireGuard VPNs to erx.zahid.lan and dn42-vps.lan. OSPF area 1 neighbors witherx.zahid.lan and dn42-vps.lan. Source NAT on VPN interfaces, such that any outbound traffic destined for DN42, is NATed to a DN42 IP. Router-On-A-Stick VLANs - with a VLAN trunk down to the Cisco 2960G. Cisco 2960G - usman-cisco.lan\nBasic Layer 2 switching to normal end user hosts. Raspberry Pi 4 8GB - pi.usman.lan\nSome of the Docker Applications I host: Unbound DNS Server DNS A and PTR records, for the .lan domain. Plex Media Server Radarr, Sonarr, Jackett, qBittorrent. Syncthing. NGINX Proxy Manager - routes a few of the mentioned services through Cloudfare\u0026rsquo;s WAF, for DDOS mitigation and public IP obfuscation. WD 8TB NAS - nas.usman.lan\nSMB Shares. Plex Media Server My DN42 Nodes My DN42 nodes are hosted on cloud infrastructure. See my DN42 peering page for more info. Offsite Network - Owned by Zahid (see f2ncy.github.io) Ubiquiti Edgerouter X - erx.zahid.lan\nWireGuard VPNs and OSPF area 1 to erx.usman.lan and fr-lil1.dn42 Source NAT on VPN interfaces, such that any outbound traffic destined for DN42, is NATed to a DN42 IP. Cisco 3560G - core.zahid.lan\nSVIs for VLANs. OSPF area 1 with erx.zahid.lan Raspberry Pi 4 8GB - pi.zahid.lan\nRunning as a host for Docker apps. ","permalink":"https://blog.usman.network/posts/usmannet/","summary":"Logical Overview Network Infrastructure Breakdown: My network mainly consists of two Ubiquiti EdgeRouter Xs, two Cisco Catalyst switches, and cloud VPSs.\nWireGuard is used as the VPN tunneling protocol, to connect sites and VPS Instances.\nDN42 BGP: I\u0026rsquo;m a member of the DN42 BGP project.\nfr-lil1, uk-lon1, us-west1 act as the eBGP edge routers, peering peering with various providers, and allowing access the to the DN42 private network. iBGP between fr-lil1, uk-lon1 \u0026amp; us-west1 (exchanging only external DN42 BGP routes).","title":"UsmanNet 2022 - An Overview of my Network"},{"content":"What is ROA/RPKI? Route Origin Authentication (ROA) - is a way to verify whether an IP prefix advertised, is actually owned by the Autonomous System (AS) that advertised it.\nResource Public Key Infrastructure (RPKI) - is a protocol that facilitates the exchange of ROA and other related information between ASes.\nHow does ROA/RPKI work? Essentially, there are central databases which contain a list of all ASes and the IP prefixes that they are allowed to advertise. On the public internet, these databases are usually hosted by Regional Internet Regestries, such as ARIN, APNIC, and RIPE.\nValidators receive cryprograhically-signed ROAs from the Regional Internet Registries, which contains a list of all ASes and the IP prefixes that they are allows to advertise.\nRouters query the validators with recieved BGP advertisements, to ensure that prefixe advertisements are only accepted from ASes that own them.\nWhy ROA/RPKI? ROA/RPKI can be used to prevent:\nBGP hijacking - where an actor is able to advertise a prefix that they don\u0026rsquo;t own, with malicious intent. For example, the 2018 BGP hijack of Amazon DNS to steal crypto currency. 1\nRoute Leaks - where an AS inadvertently advertises a prefix that they don\u0026rsquo;t own. For example, in 2008, where an ISP in Pakistan accidentally announced IP routes for YouTube by blackholing the video service internally to their network. 2\nROA/RPKI for DN42 Similar to the public internet, ROA/RPKI has the same components on DN42:\nA central database of ASes and the IP prefixes they are allowed to advertise A validator which recieves cryptographically-signed ROAs from the central database. A BGP router that queries the validator. 1. A central database of ROAs In DN42, the central authority that maintains the ROA/RPKI database is \u0026ldquo;Burble\u0026rdquo;. Shown below, there is just .json file that contains all the data. This is what the validator will download. 2. The Validator - cloudflare/goRTR Docker Container The validator is a cloudflare/goRTR docker container that runs on an Ununtu Linux Server, within my network.\nIt is responsible for downloading the ROA/RPKI database from Burble, and then responding to queries from my router.\nStarting up the Docker Container The docker run command that I used to start the goRTR container:\ndocker run -ti -p 8082:8082 cloudflare/gortr -cache https://dn42.burble.com/roa/dn42_roa_46.json -verify=false -checktime=false -bind :8082 Roughly translated, this means: create a continer using the cloudflare/gortr image, using burble\u0026rsquo;s .json file, and bind it to port 8082. Verifying the ROA/RPKI database connectivity Checking the container\u0026rsquo;s logs, we can see that the contianer periodically downloads the ROA/RPKI database from Burble and checks to see if there are any changes.\n3. RPKI on VyOS Shown below, the router that I installed RPKI on is my VyOS cloud router edge.dn42.lan, as it is the only node that BGP peerings with other DN42 members.\nRPKI Configuration Initially, I configured the connection to the validator container. This creates a cache of the RPKI DB from 10.0.10.13:8082 (the docker container endpoint).\nprotocols { rpki { cache GoRTR { address 10.0.10.13 port 8082 } } I also created a route map that denies prefixes, that match any RPKI \u0026ldquo;invalid\u0026rdquo; prefixes. This means that any prefixes that are not in the RPKI database, or are invalid will be filtered out of the BGP route table.\npolicy { route-map DN42-ROA { description DN42RouteMap rule 50 { action deny match { rpki invalid } } } } Finally, assigning the route map to BGP peers. Below is an example of a BGP peering, on the edge.dn42.lan router, with the route map applied.\nprotocols { bgp 4242421869 { neighbor 172.20.16.141 { address-family { ipv4-unicast { route-map { export DN42-ROA import DN42-ROA } } } description chrismoos ebgp-multihop 250 remote-as 4242421588 } All Done!\nThe Vyos router is configured to use ROA/RPKI with the route map, so invalid prefixes are filtered out of the routing table.\nhttps://www.thousandeyes.com/blog/amazon-route-53-dns-and-bgp-hijack\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nhttps://www.wired.com/2008/02/pakistans-accid/\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","permalink":"https://blog.usman.network/posts/bgp-rpki-roa/","summary":"What is ROA/RPKI? Route Origin Authentication (ROA) - is a way to verify whether an IP prefix advertised, is actually owned by the Autonomous System (AS) that advertised it.\nResource Public Key Infrastructure (RPKI) - is a protocol that facilitates the exchange of ROA and other related information between ASes.\nHow does ROA/RPKI work? Essentially, there are central databases which contain a list of all ASes and the IP prefixes that they are allowed to advertise.","title":"DN42 Part 3: BGP ROA/RPKI Filtering using Docker"},{"content":"What is Tunnel Broker? Tunnel Broker (provided by Hurricane Electric) is a service that allows users to connect the IPv6 internet, over IPv4.\nHow it works It essentially works by establishing a GRE tunnel to one of Hurricane Electric\u0026rsquo;s PoPs, via the IPv4 internet, and then running IPv6 ranges over it.\nWhy Tunnel Broker? Accessibility I decided to setup Tunnel Broker, as my ISP doesn\u0026rsquo;t support IPv6. This would allow access to IPv6-only services on the internet. Hosting Due to the abundance of IPv6 addresses, Tunnel Broker can provide multiple /48 ranges. Publicly hosting services would be easier as NAT wouldn\u0026rsquo;t be needed (my end devices would have publicly routable IPv6 addresses). I wouldn\u0026rsquo;t have to mess around with port forwarding/destination NAT. I would only have to modify WAN firewall rules, to allow inbound WAN traffic to my devices. Configuration Hurricane Electric\u0026rsquo;s Side HE\u0026rsquo;s side of the configuration was straight forward. I made an account and created a regular tunnel.\nThis involved providing my public IPv4 address, selecting a HE PoP location, and claiming the /48 and 64 IPv6 ranges. For the purposes of this article, I\u0026rsquo;ve replaced my real IPv4 and IPv6 ranges.\nIP Addressing For reference:\nHE\u0026rsquo;s public IPv4 address - 1.1.1.1 HE\u0026rsquo;s public IPv6 address - aaa:aaa:aaa:aaa::1/64 - HE\u0026rsquo;s address for their GRE tunnel interface. My client IPv4 address - 6.6.6.6 My client IPv6 address - aaa:aaa:aaa:aaa::2/64 - my address for the local GRE tunnel interface. Routed Ranges - IPv6 ranges that my end devices can use:\nMy Routed /64 - ccc:ccc:ccc:ccc::/64 My Routed /48 - ddd:ddd:ddd::/48 EdgeRouter X Configuration Establishing the GRE Tunnel set interfaces tunnel tun0 address \u0026#39;aaa:aaa:aaa:aaa::2/64\u0026#39; set interfaces tunnel tun0 description \u0026#39;HE.NET IPv6 Tunnel\u0026#39; set interfaces tunnel tun0 encapsulation sit set interfaces tunnel tun0 local-ip 6.6.6.6 set interfaces tunnel tun0 multicast disable set interfaces tunnel tun0 remote-ip 1.1.1.1 set interfaces tunnel tun0 ttl 255 set protocols static interface-route6 \u0026#39;::/0\u0026#39; next-hop-interface tun0 This:\nCreates a GRE tunnel called tun0. Sets the GRE encapsulation to SIT. Sets the local and remote tunnel endpoint IPs. Sets an IPv6 default interface route to tun0, so that all IPv6 internet traffic goes down the interface. Testing the GRE Tunnel To verify the GRE tunnel connectivity, I pinged the HE server endpoint (aaa:aaa:aaa:aaa::1).\nusman@usman-erx:~$ ping6 aaa:aaa:aaa:aaa::1 PING aaa:aaa:aaa:aaa::1(aaa:aaa:aaa:aaa::1) 56 data bytes 64 bytes from aaa:aaa:aaa:aaa::1: icmp_seq=1 ttl=120 time=13.7 ms 64 bytes from aaa:aaa:aaa:aaa::1: icmp_seq=2 ttl=120 time=13.7 ms 64 bytes from aaa:aaa:aaa:aaa::1: icmp_seq=3 ttl=120 time=20.7 ms 64 bytes from aaa:aaa:aaa:aaa::1: icmp_seq=4 ttl=120 time=12.0 ms --- aaa:aaa:aaa:aaa::1 ping statistics --- 4 packets transmitted, 4 received, 0% packet loss, time 3009ms rtt min/avg/max/mdev = 12.038/15.082/20.748/3.347 ms usman@usman-erx:~$ From my Edgerouter, I was able to ping the HE IPv6 server endpoint, over the GRE tunnel.\nAn average of 11ms latency - which is more than acceptable.\nI was also able to ping Google\u0026rsquo;s IPv6 DNS server.\nAs per the IPv6 routing table, any unspecified traffic was routed over the tun0 interface.\nusman@usman-erx:~$ ping6 2001:4860:4860::8888 PING 2001:4860:4860::8888(2001:4860:4860::8888) 56 data bytes 64 bytes from 2001:4860:4860::8888: icmp_seq=1 ttl=120 time=19.4 ms 64 bytes from 2001:4860:4860::8888: icmp_seq=2 ttl=120 time=19.8 ms 64 bytes from 2001:4860:4860::8888: icmp_seq=3 ttl=120 time=13.8 ms 64 bytes from 2001:4860:4860::8888: icmp_seq=4 ttl=120 time=14.0 ms ^C --- 2001:4860:4860::8888 ping statistics --- 4 packets transmitted, 4 received, 0% packet loss, time 3009ms rtt min/avg/max/mdev = 13.854/16.802/19.838/2.836 ms usman@usman-erx:~$ show ipv6 route IPv6 Routing Table Codes: K - kernel route, C - connected, S - static, R - RIP, O - OSPF, IA - OSPF inter area, E1 - OSPF external type 1, E2 - OSPF external type 2, N1 - OSPF NSSA external type 1, N2 - OSPF NSSA external type 2, B - BGP Timers: Uptime IP Route Table for VRF \u0026#34;default\u0026#34; S ::/0 [1/0] via ::, tun0, 01w3d04h C ::1/128 via ::, lo, 02w1d22h C aaa:aaa:aaa:aaa::/64 via ::, tun0, 01w3d04h C fe80::/64 via ::, tun0, 01w3d04h IPv6 Router Advertisements Once my EdgeRouter was IPv6 enabled, I set about connecting my end devices. I used router adverts to automatically assign the addresses my devices.\nIt uses a /64 IPv6 prefix (from my routable /48) and the client\u0026rsquo;s MAC address, to create an IPv6 address. This is a form of Stateless Address Auto Configuration (SLAAC).\nI use router on a stick VLANs, where virtual interfaces are defined on my EdgeRouter. This made is easy to configure the RA.\nE.g. For VLAN 20, I created a /64 subnet out of my original /48 - ddd:ddd:ddd:20::/64.\nset interfaces switch switch0 vif 20 ipv6 address eui64 \u0026#39;ddd:ddd:ddd:20::/64\u0026#39; set interfaces switch switch0 vif 20 ipv6 router-advert name-server \u0026#39;2001:4860:4860::8888\u0026#39; set interfaces switch switch0 vif 20 ipv6 router-advert prefix \u0026#39;ddd:ddd:ddd:20::/64\u0026#39; This:\nSets vif 20 an ipv6 address, comprised of ddd:ddd:ddd:20::/64 and vif 20\u0026rsquo;s MAC address. Sets Google\u0026rsquo;s IPv6 DNS as the name server. Advertises the prefix to the clients. vif 20 was set a IPv6 address of ddd:ddd:ddd:20:7683:c2ff:fef5:dadb/64 - which would be the default gateway for end devices on VLAN 20.\nusman@usman-erx:~$ show interfaces Codes: S - State, L - Link, u - Up, D - Down, A - Admin Down Interface IP Address S/L Description --------- ---------- --- ----------- switch0.20 10.0.20.1/24 u/u IoT ddd:ddd:ddd:20:7683:c2ff:fef5:dadb/64 [..] Verifying Connectivity On End Devices Using SLAAC, my Debian based Raspberry Pi had been delegated the IPv6 address:\ninet6 ddd:ddd:ddd:20:e7d5:6b06:84cd:9ae7 from the ddd:ddd:ddd:20::/64 prefix.\nusman@raspberrypi:~$ sudo ifconfig eth0 eth0: flags=4163\u0026lt;UP,BROADCAST,RUNNING,MULTICAST\u0026gt; mtu 1500 inet 10.0.10.14 netmask 255.255.255.0 broadcast 10.0.10.255 inet6 fe80::e6ea:3e88:42f3:53e5 prefixlen 64 scopeid 0x20\u0026lt;link\u0026gt; inet6 ddd:ddd:ddd:20:e7d5:6b06:84cd:9ae7 prefixlen 64 scopeid 0x0\u0026lt;global\u0026gt; ether e4:5f:01:25:18:aa txqueuelen 1000 (Ethernet) RX packets 667315319 bytes 748041609 (713.3 MiB) RX errors 108935 dropped 108935 overruns 0 frame 0 TX packets 648634493 bytes 464678115 (443.1 MiB) TX errors 0 dropped 0 overruns 0 carrier 0 collisions 0 usman@raspberrypi:~$ To verify connectivity, I also ran a traceroute to Google\u0026rsquo;s IPv6 DNS server.\nusman@raspberrypi:~$ traceroute6 2001:4860:4860::8888 traceroute to 2001:4860:4860::8888 (2001:4860:4860::8888), 30 hops max, 80 byte packets 1 ddd:ddd:ddd:20:7683:c2ff:fef5:dadb (ddd:ddd:ddd:20:7683:c2ff:fef5:dadb) 0.512 ms 0.421 ms 0.580 ms 2 tunnel718369.tunnel.tserv5.lon1.ipv6.he.net (2001:470:1f08:213::1) 19.324 ms 26.367 ms 17.280 ms 3 e0-19.core2.lon2.he.net (2001:470:0:67::1) 17.346 ms 20.102 ms 22.073 ms 4 2001:7f8:be::1:5169:1 (2001:7f8:be::1:5169:1) 43.789 ms 43.786 ms 43.788 ms 5 2a00:1450:80f9::1 (2a00:1450:80f9::1) 26.844 ms 2a00:1450:8125::1 (2a00:1450:8125::1) 19.985 ms * 6 dns.google (2001:4860:4860::8888) 25.651 ms 13.551 ms 17.539 ms The traceroute confirmed that the traffic goes through my EdgeRouter\u0026rsquo;s IPv6 interface ddd:ddd:ddd:20:7683:c2ff:fef5:dadb, over the GRE tunnel and HE\u0026rsquo;s infrastructure, and out to Google.\nFirewalling As my devices had publicly routable IPv6 addresses delegated to them, I added firewall rules to inbound limit traffic.\nI created two firewall lists WAN_IN (from the internet to end devices) and WAN_Local (from the internet to the router).\nset firewall ipv6-name WAN_In default-action drop set firewall ipv6-name WAN_In rule 10 action accept set firewall ipv6-name WAN_In rule 10 description \u0026#39;allow established/related traffic\u0026#39; set firewall ipv6-name WAN_In rule 10 protocol all set firewall ipv6-name WAN_In rule 10 state established enable set firewall ipv6-name WAN_In rule 10 state related enable set firewall ipv6-name WAN_In rule 20 action drop set firewall ipv6-name WAN_In rule 20 protocol all set firewall ipv6-name WAN_In rule 20 state invalid enable set firewall ipv6-name WAN_In rule 30 action accept set firewall ipv6-name WAN_In rule 30 description \u0026#39;allow icmpv6\u0026#39; set firewall ipv6-name WAN_In rule 30 protocol icmpv6 set firewall ipv6-name WAN_Local default-action drop set firewall ipv6-name WAN_Local rule 10 action accept set firewall ipv6-name WAN_Local rule 10 description \u0026#39;allow established/related traffic\u0026#39; set firewall ipv6-name WAN_Local rule 10 protocol all set firewall ipv6-name WAN_Local rule 10 state established enable set firewall ipv6-name WAN_Local rule 10 state related enable set firewall ipv6-name WAN_Local rule 20 action drop set firewall ipv6-name WAN_Local rule 20 protocol all set firewall ipv6-name WAN_Local rule 20 state invalid enable set firewall ipv6-name WAN_Local rule 30 action accept set firewall ipv6-name WAN_Local rule 30 description \u0026#39;allow icmpv6\u0026#39; set firewall ipv6-name WAN_Local rule 30 protocol icmpv6 Both firewall lists have 3 rules:\nDefault action for inbound traffic is drop. Rule 10 - allows established and related traffic, from WAN to end devices. Rule 20 - drops invalid state packets. Rule 30 - Allows ICMPv6. I then associated the rule lists with the GRE tun0 interface, which filtered the traffic.\nset interfaces tunnel tun0 firewall in ipv6-name WAN_In set interfaces tunnel tun0 firewall local ipv6-name WAN_Local ","permalink":"https://blog.usman.network/posts/hurricane-electric-ipv6/","summary":"What is Tunnel Broker? Tunnel Broker (provided by Hurricane Electric) is a service that allows users to connect the IPv6 internet, over IPv4.\nHow it works It essentially works by establishing a GRE tunnel to one of Hurricane Electric\u0026rsquo;s PoPs, via the IPv4 internet, and then running IPv6 ranges over it.\nWhy Tunnel Broker? Accessibility I decided to setup Tunnel Broker, as my ISP doesn\u0026rsquo;t support IPv6. This would allow access to IPv6-only services on the internet.","title":"Hurricane Electric IPv6 Tunnel Broker On a Ubiquiti EdgeRouter"},{"content":"I recently connected to the DN42 BGP mesh, a big network which employs WAN technologies to create an internet like mesh. Read my first most for more info on DN42.\nIn this post, I\u0026rsquo;ll go over how I:\nProvisioned an AWS Linux VPS. Created a WireGuard Site2Site VPN Connection between my Ubiquiti EdgeRouter and VPS. Utilized the BIRD internet routing daemon to handle internal BGP routing over that VPN connection. The end goal was to have the AWS VPS be able to access the DN42 mesh (using iBGP) via my EdgeRouter, and then through the EdgeRouter\u0026rsquo;s 5 eBGP peerings (see diagram).\nProvisioning the AWS VPS After creating an AWS free tier account, I chose to use a new Debian Instance. Any modern Linux distribution (with BIRD, WireGuard and a Public IP address) should suffice.\nI selected the free tier eligible t2.micro. It comes with a 2.5Ghz vCPU, 1GB of RAM and 7GB of storage, which is plenty for a BGP router with a route table the size of DN42\u0026rsquo;s (~600 prefixes). One I launched the VPS, I connected to it using my generated AWS SSH private key.\nssh -i C:\\Users\\Usman\\.ssh\\AWS_Access.pem admin@AWS-VPS root@AWS-VPS:/home/admin# neofetch _,met$$$$$gg. root@AWS-VPS ,g$$$$$$$$$$$$$$$P. -------------------- ,g$$P\u0026#34; \u0026#34;\u0026#34;\u0026#34;Y$$.\u0026#34;. OS: Debian GNU/Linux 10 (buster) x86_64 ,$$P\u0026#39; `$$$. Host: HVM domU 4.2.amazon \u0026#39;,$$P ,ggs. `$$b: Kernel: 4.19.0-18-cloud-amd64 `d$$\u0026#39; ,$P\u0026#34;\u0026#39; . $$$ Uptime: 16 hours $$P d$\u0026#39; , $$P Packages: 452 (dpkg) $$: $$. - ,d$$\u0026#39; Shell: bash 5.0.3 $$; Y$b._ _,d$P\u0026#39; CPU: Intel Xeon E5-2686 v4 (1) @ 2.300GHz Y$$. `.`\u0026#34;Y$$$$P\u0026#34;\u0026#39; GPU: Cirrus Logic GD 5446 `$$b \u0026#34;-.__ Memory: 74MiB / 987MiB `Y$$ `Y$$. `$$b. `Y$$b. `\u0026#34;Y$b._ `\u0026#34;\u0026#34;\u0026#34; Installing the required packages Next, I upgraded the system packages, installed WireGuard and the BIRD routing daemon.\nroot@AWS-VPS:~$ sudo apt update \u0026amp;\u0026amp; sudo apt upgrade -y root@AWS-VPS:~$ sudo apt install wireguard root@AWS-VPS:~$ sudo apt install bird Establishing the WireGuard VPN Tunnel Generating Key Pairs After the installation, I generated WireGuard Public and Private Key Pairs, on my EdgeRouter and VPS. Where each peer has public/private key pair, and only needs to know the peer\u0026rsquo;s public key.\nOn the EdgeRouter:\nusman@ER-X:~$ mkdir /home/usman/wgconfs/AWS usman@ER-X:~$ cd /home/usman/wgconfs/AWS usman@ER-X:~/wgconfs/AWS$ wg genkey | tee privatekey | wg pubkey \u0026gt; publickey usman@ER-X:~/wgconfs/AWS$ ls private public On the VPS:\nroot@AWS-VPS:~$ cd /etc/wireguard/ root@AWS-VPS:/etc/wireguard$ wg genkey | tee privatekey | wg pubkey \u0026gt; publickey usman@AWS-VPS:~/etc/wireguard$ ls private public WireGuard on the EdgeRouter set interfaces wireguard wg67 address 10.132.0.2/30 set interfaces wireguard wg67 mtu 1420 set interfaces wireguard wg67 peer LHv3equY4NyDeLVCY1+P5IrCA23+bYLixB18ehHjzzM= allowed-ips 0.0.0.0/0 set interfaces wireguard wg67 peer LHv3equY4NyDeLVCY1+P5IrCA23+bYLixB18ehHjzzM= endpoint \u0026#39;aws.vps.com:51823\u0026#39; set interfaces wireguard wg67 private-key /home/usman/wgconfs/privatekey set interfaces wireguard wg67 route-allowed-ips false What this does:\nCreates a WireGuard Interface, called wg67 with an IP address of 10.132.0.2 Sets the MTU to 1420 Creates a peer with the public key of LHv3equY4NyDeLVCY1+P5IrCA23+bYLixB18ehHjzzM= Allows any ip address to flow over the tunnel. Specifies the public IP endpoint of the AWS VPS. Associates the previously generated private key with the wg67 interface. Set the route-allowed-ips value to false, as that would create a default route via the VPS. Allowing WireGuard through the EdgeRouter\u0026rsquo;s firewall set firewall name WAN_LOCAL rule 25 action accept set firewall name WAN_LOCAL rule 25 description iBGP-AWS set firewall name WAN_LOCAL rule 25 destination port 51823 set firewall name WAN_LOCAL rule 25 log enable set firewall name WAN_LOCAL rule 25 protocol udp What this does:\nCreates an accept rule in the WAN_LOCAL rule set, which regulates traffic from the WAN interface, to the router. Accepts all incoming UDP connections on port 51823, from the AWS VPS. WireGuard on the AWS Debian VPS WireGuard on Linux is similar to the EdgeRouter\u0026rsquo;s config.\nip link add dev wg0 type wireguard ip address add dev wg0 10.132.0.1/30 wg set wg0 listen-port 51823 private-key /etc/wireguard/privatekey peer \u0026lt;erxpubkey\u0026gt; allowed-ips 0.0.0.0/0 endpoint \u0026lt;erx.pub.ip\u0026gt;:51823 ip link set up dev wg0 ip addr add 172.22.132.169/32 dev lo What this does:\nCreates an interface called wg0, with the type wireguard. Assigns the address 10.132.0.1/30 to the wg0 interface. Sets the server listen port to 51823. Sets the privatekey to the location of the previously generated private key. Allows any ip address over the tunnel. Specifies the public IP and port of the EdgeRouter peer. Allowing WireGuard through AWSs Security Group I also modified the VPS\u0026rsquo;s security group, so that it allows incoming udp connections on port 51823, from the EdgeRouter.\nTesting Reachability After configuring the Firewall Rules, I was able to ping between the VPS and EdgeRouter, over the WireGuard VPN Interface.\nFrom the EdgeRouter, to the VPS:\nusman@ER-X:~$ ping 10.132.0.1 PING 10.132.0.1 (10.132.0.1) 56(84) bytes of data. 64 bytes from 10.132.0.1: icmp_seq=1 ttl=64 time=31.4 ms 64 bytes from 10.132.0.1: icmp_seq=2 ttl=64 time=31.5 ms 64 bytes from 10.132.0.1: icmp_seq=3 ttl=64 time=35.0 ms 64 bytes from 10.132.0.1: icmp_seq=4 ttl=64 time=34.3 ms 64 bytes from 10.132.0.1: icmp_seq=5 ttl=64 time=31.8 ms From the VPS to the EdgeRouter:\nadmin@AWS-VPS:~$ ping 10.132.0.2 PING 10.132.0.2 (10.132.0.2) 56(84) bytes of data. 64 bytes from 10.132.0.2: icmp_seq=1 ttl=64 time=39.4 ms 64 bytes from 10.132.0.2: icmp_seq=2 ttl=64 time=34.7 ms 64 bytes from 10.132.0.2: icmp_seq=3 ttl=64 time=34.8 ms 64 bytes from 10.132.0.2: icmp_seq=4 ttl=64 time=29.5 ms 64 bytes from 10.132.0.2: icmp_seq=5 ttl=64 time=28.9 ms The latency ranges from 30-40 ms, which perfectly acceptable for a VPN connection over the internet.\nWireGuard also provides some diagnostic data (e.g. data usage, latest handshake etc.).\nOn the EdgeRouter:\nusman@ER-X:~$ sudo wg interface: wg67 public key: P1FrJ1IpHCFX3Tk/4aFxbrCbD4VDefwHaieVWDWoXx0= private key: (hidden) listening port: 51650 peer: LHv3equY4NyDeLVCY1+P5IrCA23+bYLixB18ehHjzzM= endpoint: AWS-pub.ip:51823 allowed ips: 0.0.0.0/0 latest handshake: 46 seconds ago transfer: 252.68 MiB received, 30.28 MiB sent On the VPS:\nroot@AWS-VPS:~# wg interface: wg67 public key: LHv3equY4NyDeLVCY1+P5IrCA23+bYLixB18ehHjzzM= private key: (hidden) listening port: 51823 peer: P1FrJ1IpHCFX3Tk/4aFxbrCbD4VDefwHaieVWDWoXx0= endpoint: edgerouter-pub.ip:51650 allowed ips: 0.0.0.0/0 latest handshake: 46 seconds ago transfer: 30.21 MiB received, 252.70 MiB sent iBGP Configuration Once the VPN was up, I set about creating a internal BGP peering between the EdgeRouter and VPS (so that the VPS could reach DN42, via the EdgeRouter\u0026rsquo;s upstream transit peers).\nWhy BIRD Internet Routing Daemon? I chose to use the free and open-source BIRD routing daemon as its widely used in the DN42 mesh and on the real internet.\nNetflix proudly uses BIRD to run their global CDN backbone, which handles ~100Tbps at peak. So its probably fine for DN42\u0026rsquo;s few hundred routes.\nBIRD BGP Configuration on the VPS Upon installation, BIRD created a template configuration file in /etc/bird/bird.conf. I just had to add some parameters regarding my own BGP peering and WireGuard tunnel.\nroot@AWS-VPS:/etc/bird# vim bird.conf router id 172.22.132.169; protocol kernel { scan time 20; import none; export filter { if source = RTS_STATIC then reject; krt_prefsrc = 172.22.132.169; accept; }; }; protocol device { scan time 60; } protocol direct { interface \u0026#34;*\u0026#34;; } protocol bgp { description \u0026#34;BIRD BGP CONFIG\u0026#34;; local as 4242421869; neighbor 10.132.0.2 as 4242421869; graceful restart; direct; import all; export all; } What this does:\nSets the router ID to 172.22.132.169 - an IP address in my designated DN42 range (claimed by my ASN). Creates a kernel table. The Kernel protocol is not a real routing protocol. Instead of communicating with other routers in the network, it performs synchronization of BIRD\u0026rsquo;s routing tables with the OS kernel. Creates protocol direct and protocol device, which are BIRD specific settings. Initialises the BGP protocol on BIRD, with the local ASN of 4242421869. Sets the neighbour remote ASN to 4242421869 via 10.132.0.2 (the WireGuard IP address for the EdgeRouter). The use of the same local and remote ASN triggers internal BGP, as opposed to external BGP. BGP Configuration for the EdgeRouter BGP on the EdgeRouter similar to BIRD.\nset protocols bgp 4242421869 parameters router-id 172.22.132.161 set protocols bgp 4242421869 neighbor 10.132.0.1 description iBGP set protocols bgp 4242421869 neighbor 10.132.0.1 nexthop-self set protocols bgp 4242421869 neighbor 10.132.0.1 remote-as 4242421869 set protocols bgp 4242421869 neighbor 10.132.0.1 soft-reconfiguration inbound What this does:\nCreates an instance of BGP, with my local ASN (4242421869) and router id 172.22.132.161. Sets the neighbour remote ASN to 4242421869 via 10.132.0.1 (the WireGuard IP address for the AWS VPS). Enables next-hop self, which forces the router to do a recursive lookup in order to determine which egress interface should be used to send the packets out. Enables soft-reconfiguration inbound. Verifying the iBGP Peering On the EdgeRouter, the BGP state had changed to \u0026ldquo;Established\u0026rdquo;, its announcing 463 routes to the VPS, at IP 10.132.0.1 (the WireGuard peer IP).\nusman@ER-X:~$ show ip bgp neighbors 10.132.0.1 BGP neighbor is 10.132.0.1, remote AS 4242421869, local AS 4242421869, internal link BGP version 4, remote router ID 172.22.132.169 BGP state = Established, up for 17:26:23 Last read 17:26:23, hold time is 180, keepalive interval is 60 seconds Neighbor capabilities: Route refresh: advertised and received (new) 4-Octet ASN Capability: advertised and received Address family IPv4 Unicast: advertised and received Received 5794 messages, 21 notifications, 0 in queue Sent 20084 messages, 12 notifications, 0 in queue Route refresh request: received 0, sent 0 Minimum time between advertisement runs is 5 seconds For address family: IPv4 Unicast BGP table version 43303, neighbor version 43303 Index 0, Offset 0, Mask 0x1 Graceful restart: received Inbound soft reconfiguration allowed NEXT_HOP is always this router Community attribute sent to this neighbor (both) 0 accepted prefixes 463 announced prefixes Connections established 23; dropped 22 Local host: 10.132.0.2, Local port: 179 Foreign host: 10.132.0.1, Foreign port: 54586 Nexthop: 10.132.0.2 Nexthop global: :: Nexthop local: :: BGP connection: non shared network Last Reset: 17:26:23, due to BGP Notification sent Notification Error Message: (Cease/Administratively Reset.) On the AWS VPS:\nAfter entering the birdc shell on the VPS, I could also see that the BGP state had been established.\nIts accepting those 463 routes that the EdgeRouter advertised, over the WireGuard tunnel (IP address 10.132.0.2).\nroot@AWS-VPS:~# birdc bird\u0026gt; show protocols bgp1 bgp1 BGP master up 16:37:06 Established Description: BIRD BGP CONFIG Preference: 100 Input filter: ACCEPT Output filter: REJECT Routes: 463 imported, 0 exported, 463 preferred Route change stats: received rejected filtered ignored accepted Import updates: 466 0 0 0 466 Import withdraws: 0 0 --- 0 0 Export updates: 469 466 3 --- 0 Export withdraws: 0 --- --- --- 0 BGP state: Established Neighbor address: 10.132.0.2 Neighbor AS: 4242421869 Neighbor ID: 172.22.132.161 Neighbor caps: refresh AS4 Session: internal multihop AS4 Source address: 10.132.0.1 Hold timer: 147/180 Keepalive timer: 40/60 bird\u0026gt; Inspecting VPS\u0026rsquo;s Route Table The AWS VPS now has DN42\u0026rsquo;s prefixes in its kernel route table.\nDN42 prefixes (172.20.0.0/14) have a gateway of the EdgeRouter, (over the WireGuard VPN tunnel).\nroute -n showing a subset of the VPS\u0026rsquo;s route table:\nroot@AWS-VPS:~# route -n Kernel IP routing table Destination Gateway Genmask Flags Metric Ref Use Iface 0.0.0.0 172.31.0.1 0.0.0.0 UG 0 0 0 eth0 172.20.0.53 10.132.0.2 255.255.255.255 UGH 0 0 0 wg0 172.20.1.0 10.132.0.2 255.255.255.0 UG 0 0 0 wg0 172.20.4.32 10.132.0.2 255.255.255.240 UG 0 0 0 wg0 172.20.4.96 10.132.0.2 255.255.255.248 UG 0 0 0 wg0 172.20.4.104 10.132.0.2 255.255.255.248 UG 0 0 0 wg0 172.20.6.224 10.132.0.2 255.255.255.248 UG 0 0 0 wg0 172.20.6.248 10.132.0.2 255.255.255.248 UG 0 0 0 wg0 172.20.8.0 10.132.0.2 255.255.254.0 UG 0 0 0 wg0 172.20.12.192 10.132.0.2 255.255.255.224 UG 0 0 0 wg0 172.20.14.32 10.132.0.2 255.255.255.224 UG 0 0 0 wg0 172.20.14.64 10.132.0.2 255.255.255.224 UG 0 0 0 wg0 172.20.14.192 10.132.0.2 255.255.255.192 UG 0 0 0 wg0 172.20.15.96 10.132.0.2 255.255.255.224 UG 0 0 0 wg0 172.20.16.0 10.132.0.2 255.255.255.128 UG 0 0 0 wg0 172.20.16.128 10.132.0.2 255.255.255.128 UG 0 0 0 wg0 172.20.18.64 10.132.0.2 255.255.255.224 UG 0 0 0 wg0 172.20.18.224 10.132.0.2 255.255.255.240 UG 0 0 0 wg0 172.20.19.64 10.132.0.2 255.255.255.224 UG 0 0 0 wg0 172.20.20.96 10.132.0.2 255.255.255.224 UG 0 0 0 wg0 172.20.28.224 10.132.0.2 255.255.255.224 UG 0 0 0 wg0 Ping Testing Success! Pinging a device inside the DN42 range 172.23.0.80 confirms that I have access to the DN42 network.\nroot@ip-172-31-0-189:~# ping 172.23.0.80 PING 172.23.0.80 (172.23.0.80) 56(84) bytes of data. 64 bytes from 172.23.0.80: icmp_seq=1 ttl=60 time=69.3 ms 64 bytes from 172.23.0.80: icmp_seq=2 ttl=60 time=72.7 ms 64 bytes from 172.23.0.80: icmp_seq=3 ttl=60 time=71.7 ms 64 bytes from 172.23.0.80: icmp_seq=4 ttl=60 time=83.8 ms 64 bytes from 172.23.0.80: icmp_seq=5 ttl=60 time=74.5 ms Traceroute Testing A traceroute to 172.23.0.80 confirms that the packets are flowing:\nFirst through the Ubiquiti EdgeRouter 10.132.0.2 over the WG VPN tunnel Next through the EdgeRouter\u0026rsquo;s eBGP peering with \u0026lsquo;highdef\u0026rsquo; 172.20.229.116 Through the DN42 network And finally reaches its destination in 5 total hops. root@AWS-VPS:~# traceroute 172.23.0.80 traceroute to 172.23.0.80 (172.23.0.80), 30 hops max, 60 byte packets 1 10.132.0.2 33.135 ms 33.105 ms 33.088 ms 2 172.20.229.116 52.967 ms 52.948 ms 52.932 ms 3 172.20.129.187 60.474 ms 60.459 ms 60.438 ms 4 172.20.129.169 73.126 ms 73.102 ms 78.113 ms 5 172.23.0.80 78.097 ms 78.078 ms 78.061 ms What Next? In the future, I\u0026rsquo;ll probably launch another VPS, create more BGP peering, but install everything automatically with Ansible.\n","permalink":"https://blog.usman.network/posts/ibgp-aws/","summary":"I recently connected to the DN42 BGP mesh, a big network which employs WAN technologies to create an internet like mesh. Read my first most for more info on DN42.\nIn this post, I\u0026rsquo;ll go over how I:\nProvisioned an AWS Linux VPS. Created a WireGuard Site2Site VPN Connection between my Ubiquiti EdgeRouter and VPS. Utilized the BIRD internet routing daemon to handle internal BGP routing over that VPN connection. The end goal was to have the AWS VPS be able to access the DN42 mesh (using iBGP) via my EdgeRouter, and then through the EdgeRouter\u0026rsquo;s 5 eBGP peerings (see diagram).","title":"DN42 Part 2: Conecting an AWS VPS to DN42, using iBGP and WireGuard."},{"content":" What is DN42? DN42 is a big network, which employs WAN technologies (BGP, whois database, DNS, etc) to create an internet like mesh.\nMembers connect to each other using VPN tunnels (GRE, OpenVPN, WireGuard, IPsec) and exchange routes via BGP.\nDN42 currently has 410 nodes/users, advertising ~600 prefixes. realtime map\nWhy DN42? DN42 allows you to experiment with mentioned internet technologies, without the logistical difficulties and high expenses of registering with real AS registries, on the live internet.\nMore importantly, if you misconfigure something, you don\u0026rsquo;t have to worry about causing global outages - like a Facebook Engineer did.\nHow I connected to the mesh. The Registry The registry is based on a Git repository. This allows users to create branches \u0026amp; pull requests, to register, create objects and make changes to their details.\nClaiming an IP Range and AS Number. DN42 uses the 172.20.0.0/14 range for IPv4 addresses.\nAvailable IP ranges and ASNs are can be shown in the DN42 Free Explorer. It randomly shows subnets, that are free and useable, from the range.\nDN42\u0026rsquo;s recommendation is to go with a /27 subnet, which has 30 usable IP addresses, and should be sufficient for most home users.\nFollowing the same process for an ASN and IPv6, I decided to go with:\nAn v4 subnet of 172.22.132.160/27 A v6 range of fd5f:2bd0:1feb::/48 An Autonomous System Number of AS4242421869 Making changes to the git repo. After cloning git the repo to my local machine, I created the following files in the data/ directory:\ndata/aut-num/AS4242421869 - the AS Number.\naut-num: AS4242421869 as-name: AS-USMAN-DN42 admin-c: USMAN-DN42 tech-c: USMAN-DN42 mnt-by: USMAN-MNT source: DN42 data/inet6num/fd5f:2bd0:1feb::_48 - IPv6 Range.\ninet6num: fd5f:2bd0:1feb:0000:0000:0000:0000:0000 - fd5f:2bd0:1feb:ffff:ffff:ffff:ffff:ffff cidr: fd5f:2bd0:1feb::/48 netname: USMAN-NETWORK descr: Network of Usman admin-c: USMAN-DN42 tech-c: USMAN-DN42 mnt-by: USMAN-MNT status: ASSIGNED source: DN42 data/inetnum/172.22.132.160_27 - IPv4 Range.\ninetnum: 172.22.132.160 - 172.22.132.191 cidr: 172.22.132.160/27 netname: USMAN-NETWORK admin-c: USMAN-DN42 tech-c: USMAN-DN42 mnt-by: USMAN-MNT status: ASSIGNED source: DN42 data/mntner/USMAN-MNT - data about the maintainer, including my SSH public key (for verification purposes).\nmntner: USMAN-MNT admin-c: USMAN-DN42 tech-c: USMAN-DN42 mnt-by: USMAN-MNT auth: ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDOVIdUelAhke7DImFiLdLmK5fIqDrj+UC0fMNwaWzzE/Do9s+8OrlLbyA7UNbnLpXEh6xCaE6ckL1j3Nywv8pSgwgZpnZY1smgCDvMqqRpsfqVTYzCy/6f9tzL80km53JLDKeaJSSikzPhcADpp7eCy6QlWPu+cV3om5cDIEuUvpthGfgFNlrtN88o7ryyInnxaHcr+NYWMcyoocVVieCKKbuBhOe+sCj5IFHuHq5IDX7wNbKRauHE47arhrT6aKWBHFkzMNO/XFo5/yhzeC1gzu9J+efmjf6FrjlP5Mvi6PT8tbAmIwpe6y4NZUXfC4cp3bF7L08Av7E8Lb56fBVdc9aWrGyub2Vc8WRGk1UcZoLKFzGO6DAzH2XMqUe7ZY5qHjqbojGgQXNdwCmUIVhAVjs/XCdd2J48/6PdBf2v0zwqf5x6sSwFgntL7a7+WrmIjXDRQx3aIU79djjL6DvFT1kmB6WN9T3zZAqJ5AXq76taRyPcmNmm3dKThCt34Ns= source: DN42 data/person/USMAN-DN42 - contact info.\nperson: Usman e-mail: usman@email.com nic-hdl: USMAN-DN42 mnt-by: USMAN-MNT source: DN42 data/route/172.22.132.160_27 - route for v4.\nroute: 172.22.132.160/27 origin: AS4242421869 mnt-by: USMAN-MNT source: DN42 data/route6/fd5f:2bd0:1feb::_48 - route for v6.\nroute6: fd5f:2bd0:1feb::/48 origin: AS4242421869 max-length: 48 mnt-by: USMAN-MNT source: DN42 I then ran the provided scripts to squash, verify and sign (with my public SSH key) my commits.\nOnce I pushed my commit, I created a pull request and waited for it to be approved. My Routing Daemon. Onto the actual BGP stuff\u0026hellip;\nThe Router. While most DN42 users opt for a Bird/Quagga routing daemon on a VPS, I chose to use my existing Ubiquiti EdgeRouter-X. It\u0026rsquo;s a great router, with a large range of features. See my other post for more info.\nPeering with Kioubit. I peered with the Kioubit Network, as they have automatic peering and a high centrality in the mesh (they have the most neighbours).\nI used Kioubit\u0026rsquo;s automatic peering wizard to register my ASN, WireGuard public key and tunnel IP. This essentially configures their UK BGP router to listen for a WireGuard peer, which has the correct key.\nWireGuard only requires one peer to have a port open, therefore I didn\u0026rsquo;t need to publicly open a port on my router.\nTheir side has also been configured to allow BGP advertisements from my ASN and advertise DN42\u0026rsquo;s prefixes, over the WireGuard tunnel.\nMy Side. WireGuard Tunnel. set interfaces wireguard wg4 address 192.168.219.127/32 set interfaces wireguard wg4 firewall in name DN42_MAIN_IN set interfaces wireguard wg4 firewall local name DN42_MAIN_LOCAL set interfaces wireguard wg4 mtu 1420 set interfaces wireguard wg4 peer \u0026lt;peer pubkey\u0026gt; allowed-ips 0.0.0.0/0 set interfaces wireguard wg4 peer \u0026lt;peer pubkey\u0026gt; endpoint \u0026#39;uk1.g-load.eu:21869\u0026#39; set interfaces wireguard wg4 private-key \u0026lt;my private key\u0026gt; set interfaces wireguard wg4 route-allowed-ips false What this does:\nCreates a virtual interface called wg4. Assigns it the IP address 192.168.219.127/37 (configured in the Kioubit\u0026rsquo;s automated peering). Sets the allowed-ips value to 0.0.0.0/0 - this requests to/from any IP address to traverse the tunnel. Defines the Kioubit\u0026rsquo;s Uk Node\u0026rsquo;s endpoint and port. Sets the route-allowed-ips value to false, so a default route doesn\u0026rsquo;t get added to the route table. Adds the interfaces to the firewall group DN42_IN \u0026amp; DN42_LOCAL more on this later BGP Peering. set protocols bgp 4242421869 neighbor 172.20.53.104 description kioubit set protocols bgp 4242421869 neighbor 172.20.53.104 ebgp-multihop 255 set protocols bgp 4242421869 neighbor 172.20.53.104 remote-as 4242423914 set protocols bgp 4242421869 neighbor 172.20.53.104 soft-reconfiguration inbound set protocols bgp 4242421869 neighbor 172.20.53.104 update-source 172.22.132.161 What this does:\nEnables the BGP routing daemon with my ASN 4242421869. Sets the remote remote AS, with a neighbour IP as 172.20.43.104(kioubit\u0026rsquo;s IP address in WG tunnel). Sets eBGP Multihop to 255 hops - this is required as the peering is established over a VPN tunnel, not a direct connection. Other BGP and Routing settings. set protocols bgp 4242421869 network 172.22.132.160/27 set protocols bgp 4242421869 parameters router-id 172.22.132.161 set protocols static interface-route 172.20.53.104/32 next-hop-interface wg4 What this does:\nAdvertises the 172.22.132.160/27 prefix (my DN42 subnet). Sets the router ID (which is advertised to peers) to 172.22.132.161. Created a static interface route for Kioubit\u0026rsquo;s address 172.20.53.104, via wg4. Firewall Rules and security. I used firewall rules to limit the traffic between my network and DN42.\nUbiquiti\u0026rsquo;s firewalling works by having different \u0026lsquo;directions\u0026rsquo;. IN and LOCAL.\nIN Matches on established/related and invalid traffic that is passed through the router (WAN to LAN).\nLOCAL Matches on established/related and invalid traffic that is destined for the router itself (WAN to LOCAL).\nDN42_MAIN_IN. set firewall name DN42_MAIN_IN default-action drop set firewall name DN42_MAIN_IN rule 1 action accept set firewall name DN42_MAIN_IN rule 1 description \u0026#39;Allow established/related\u0026#39; set firewall name DN42_MAIN_IN rule 1 log disable set firewall name DN42_MAIN_IN rule 1 protocol all set firewall name DN42_MAIN_IN rule 1 state established enable set firewall name DN42_MAIN_IN rule 1 state invalid disable set firewall name DN42_MAIN_IN rule 1 state new disable set firewall name DN42_MAIN_IN rule 1 state related enable The IN ruleset has a default action to drop any packets, and only allow any traffic that is established/related. Meaning only any traffic that is initiated from a device in my LAN (not the router) will be allowed.\nIf I wanted to host any services for any other DN42 members, this is where I would add another rule to allow traffic to a specific host \u0026amp; port. Along with a port forward to bypass NAT.\nDN42_MAIN_LOCAL. set firewall name DN42_MAIN_LOCAL default-action drop set firewall name DN42_MAIN_LOCAL rule 1 action accept set firewall name DN42_MAIN_LOCAL rule 1 description \u0026#39;Allow established/related\u0026#39; set firewall name DN42_MAIN_LOCAL rule 1 log disable set firewall name DN42_MAIN_LOCAL rule 1 protocol all set firewall name DN42_MAIN_LOCAL rule 1 state established enable set firewall name DN42_MAIN_LOCAL rule 1 state invalid disable set firewall name DN42_MAIN_LOCAL rule 1 state new disable set firewall name DN42_MAIN_LOCAL rule 1 state related enable set firewall name DN42_MAIN_LOCAL rule 2 action accept set firewall name DN42_MAIN_LOCAL rule 2 description \u0026#39;Allow BGP\u0026#39; set firewall name DN42_MAIN_LOCAL rule 2 destination port 179 set firewall name DN42_MAIN_LOCAL rule 2 log disable set firewall name DN42_MAIN_LOCAL rule 2 protocol tcp The local ruleset also has the same default action and established/related rule. I also have a rule to allow incoming TCP connections on port 179, for BGP.\nThis is where I would create another rule if I wanted to allow DN42 members to access something directly on the router. For example, SSH for administrative purposes.\nSource NAT. I also implemented NAT so that I can access DN42 from any device in my LAN.\nset service nat rule 5050 description \u0026#39;source NAT for DN42 Peer Kioubit\u0026#39; set service nat rule 5050 log disable set service nat rule 5050 outbound-interface wg4 set service nat rule 5050 outside-address address 172.22.132.162 set service nat rule 5050 protocol all set service nat rule 5050 source set service nat rule 5050 type source Connections destined for the DN42 prefix, will be NAT\u0026rsquo;ed through the address 172.22.132.162 (one of the IPs in my claimed range).\nFor example, my Raspberry Pi (which is in a local VLAN) can access the DN42 network and run a traceroute to a DN42 IP.\nMaps. At the moment, I have connections with 5 peers. This improves redundancy and provides better access to all areas of the mesh. ","permalink":"https://blog.usman.network/posts/dn42-bgp/","summary":"What is DN42? DN42 is a big network, which employs WAN technologies (BGP, whois database, DNS, etc) to create an internet like mesh.\nMembers connect to each other using VPN tunnels (GRE, OpenVPN, WireGuard, IPsec) and exchange routes via BGP.\nDN42 currently has 410 nodes/users, advertising ~600 prefixes. realtime map\nWhy DN42? DN42 allows you to experiment with mentioned internet technologies, without the logistical difficulties and high expenses of registering with real AS registries, on the live internet.","title":"DN42 Part 1: Connecting to the DN42 BGP Mesh"},{"content":"What is Wireguard? WireGuard is an extremely simple yet fast and modern VPN that utilizes modern cryptography. It aims to be faster, simpler, leaner, and more useful than alternatives such as IPsec \u0026amp; OpenVPN.\nWireGuard\u0026rsquo;s codebase has only 4,000 lines of code, which is considerably less than OpenVPN\u0026rsquo;s, which has 600,000.\nWireGuard\u0026rsquo;s Performance WireGuard\u0026rsquo;s speed and elegance are the main reasons for its popularity, it is significantly faster than OpenVPN \u0026amp; IPsec - in terms of raw throughput, authentication speed and latency.\nData from WireGuard.com\nHow WireGuard Works At a fundamental level, WireGuard works by creating an interface and dictating some details such as:\nYour private key Your peer\u0026rsquo;s pub key Your peer\u0026rsquo;s endpoint \u0026amp; port Some complex mathematical authentication happens, and you have a UDP tunnel which packets can traverse.\nUbiquiti EdgeRouter Ubiquiti\u0026rsquo;s EdgeRouter lineup is a relatively inexpensive platform which provides a large range of features. The EdgeRouter-X costs £50, and has some enterprise grade features and dynamic routing protocols such as BGP, MPLS, OSPF, QoS, RIP, DNAT, SNAT, DPI, etc.\nThe EdgeRouter devices come with Ubiquiti\u0026rsquo;s Debian Linux based EdgeOS, which is a fork of Vyatta.\nThere is a Web UI for basic configuration, and a Juniper-style CLI for more advanced functions.\nWireGuard Installation on ER-X 1. Download the .deb for your EdgeRouter variant and software version from the WireGuard github repository. For example, on an ER-X with v2 software, use curl in this example:\nuser@ER-X:~$ curl -OL https://github.com/WireGuard/wireguard-vyatta-ubnt/releases/download/1.0.20210606-2/e50-v2-v1.0.20210606-v1.0.20210914.deb You should then be able to see the .deb file in your home directory.\nuser@ER-X:~$ ls -la total 176 drwxr-xr-x 4 user users 800 Oct 20 11:12 . drwxr-xr-x 1 root root 288 Jun 23 20:41 .. -rw-r--r-- 1 user users 220 May 15 2017 .bash_logout -rw-r--r-- 1 user users 192 May 11 14:30 .bashrc -rw------- 1 user users 280 Oct 21 17:40 .history -rw-r--r-- 1 user users 675 May 15 2017 .profile drwxr-x--- 2 user users 304 Aug 16 18:28 .ssh -rw-r--r-- 1 user users 153820 Oct 17 16:14 e50-v2-v1.0.20210606-v1.0.20210914.deb Before installation, ensure you have the downloaded the correct fie for your Edgerouter variant and software version.\n2. Install the .deb file. To install the package, use the dpkg command.\n$ sudo dpkg -i e50-v2-v1.0.20210606-v1.0.20210914.deb 3. To verify installation, Wireguard should appear in the show interfaces menu. user@ER-X:~$ show interfaces wireguard Possible completions: \u0026lt;Enter\u0026gt; Execute the current command allowed-ips Show wireguard interface allowed ips detail Show detailed WireGuard interface information endpoints Show wireguard interface endpoints fwmark Show wireguard interface fwmark latest-handshakes Show wireguard interface latest-handshakes listen-port Show wireguard interface listen port peers Show wireguard interface peers persistent-keepalive Show wireguard interface persistent keepalive preshared-keys Show wireguard interface preshared keys private-key Show wireguard interface private key public-key Show wireguard interface public key transfer Show wireguard interface transfer statistics wg0 Show specified wireguard interface information WireGuard Configuration on ER-X 1. Generating Server Key Pair First we will need to generate a key pair for the wireguard server.\n# Create a folder for the server\u0026#39;s keys user@ER-X:~$ mkdir server_keys # Navigate to that dir user@ER-X:~$ cd server_keys # Currently in the server_keys directory user@ER-X:~/server_keys$ # Generate the keys user@ER-X:~/server_keys$ wg genkey | tee privatekey | wg pubkey \u0026gt; publickey # ls command shows the generated keys user@ER-X:~/server_keys$ ls pubklickey privatekey # Navigate back to the home directory user@ER-X:~/server_keys$ cd .. # Confirm this using pwd user@ER-X:~$ pwd /home/user You can use the cat linux command to see the contents of the keyfile.\nuser@ER-X:~/server$ cat public oUCXb+z4M6d0HCdJq2MB9WQLS8S1JsUYNM3vQTAkFmU= 2. Generating the my_phone Peer Key Pair The peer key pair can be generated on any device, however it\u0026rsquo;s more convenient to store all the keys on the router.\n# Create a folder for the peer\u0026#39;s keys user@ER-X:~$ mkdir my_phone # Navigate to that dir user@ER-X:~$ cd my_phone # Generate a key pair for the my_phone peer, in the my_phone directory user@ER-X:~/server_keys/$ wg genkey | tee privatekey | wg pubkey \u0026gt; publickey You then should have two directories; one called server_keys and my_phone.\nuser@ER-X:~$ ls -la drwxr-xr-x 4 user users 800 Oct 20 11:12 . drwxr-xr-x 1 root root 288 Jun 23 20:41 .. -rw-r--r-- 1 user users 220 May 15 2017 .bash_logout -rw-r--r-- 1 user users 192 May 11 14:30 .bashrc -rw------- 1 user users 280 Oct 21 17:40 .history -rw-r--r-- 1 user users 675 May 15 2017 .profile drwxr-x--- 2 user users 304 Aug 16 18:28 .ssh drwxr-x--- 2 user users 304 Aug 16 18:28 my_phone drwxr-x--- 2 user users 304 Aug 16 18:28 server_keys -rw-r--r-- 1 user users 153820 Oct 17 16:14 e50-v2-v1.0.20210606-v1.0.20210914.deb 3. wg0 Interface Configuration # Enter configure mode configure # The location of the server\u0026#39;s private key, previously generated [edit] user@ER-X$ set interfaces wireguard wg0 private-key /home/user/server/privatekey # Creates the Gateway IP for the VPN and the subnet # This subnet can be any private IP range, through check for conflicts user@ER-X$ set interfaces wireguard wg0 address 10.6.69.1/24 # Creates entries in the route table for the VPN subnet user@ER-X$ set interfaces wireguard wg0 route-allowed-ips true # Port for WG (that peers will use) user@ER-X$ set interfaces wireguard wg0 listen-port 51820 user@ER-X$ commit ; save 4. Adding peers to the wg0 Interface # Remote User Peer user@ER-X$ set interfaces wireguard wg0 peer /home/user/my_phone/pubkey user@ER-X$ set interfaces wireguard wg0 peer /home/user/my_phone/pubkey allowed-ips 10.6.69.2/32 user@ER-X$ commit ; save 5. Poking a hole in the firewall for WireGuard # Creates an accept rule in the WAN_LOCAL list (WAN_LOCAL - wan to router) # Accepts all incoming UDP connections, from port 51820 user@ER-X$ set firewall name WAN_LOCAL rule 20 action accept user@ER-X$ set firewall name WAN_LOCAL rule 20 protocol udp user@ER-X$ set firewall name WAN_LOCAL rule 20 destination port 51820 user@ER-X$ set firewall name WAN_LOCAL rule 20 description \u0026#39;WireGuard\u0026#39; commit ; save Once this is done, your wg0 interface and firewall configuration should look something like this.\nuser@ER-X$ show configuration } } wireguard wg0 { address 10.6.69.1/24 description WG_VPN listen-port 51820 peer XzXsLlbdFDGzK10jFxySz3Qbk8ekY7YsASPAb+QprAc= { allowed-ips 10.6.69.2/32 description my_phone } private-key **************** route-allowed-ips true } } } rule 20 { action accept description WG_IN destination { port 51820 } log enable protocol udp source { } } 6. Constructing the Config on the peer side The peer side needs a few pieces of information to create the tunnel:\nThe server\u0026rsquo;s public key The server\u0026rsquo;s endpoint (public IP address, or DNS record) The peer\u0026rsquo;s private key The peer\u0026rsquo;s IP address in the VPN subnet (the allowed IPs value set on the server) Therefore, the previously generated my_phone private key AND the server\u0026rsquo;s public key, should be copied to the peer device.\nCreate a file on the peer, with the file extension as .conf.\n[Interface] PrivateKey = \u0026lt;my_phone private key\u0026gt; ListenPort = 51820 Address = 10.6.69.3/32 # The allowed IPs value set on the server DNS = 1.1.1.1 # Optional [Peer] PublicKey = \u0026lt;pubkey of server\u0026gt; AllowedIPs = 0.0.0.0/0 # Currently set as a wildcard to route all packets through VPN Endpoint = server.com:51820 # PubIP or DNS record of server This can then be imported to the peer of your choice.\nIn the Windows peer, create a new tunnel and paste the config in.\n7. You then should be able to connect to the VPN The latest handshake and transferred traffic metric can be a useful troubleshooting indicator. More peers can be added by repeating the same steps (generating keys, allowing them in the wg0 interface and constructing the peer config).\nSplit Tunneling Split tunneling is used to send traffic, only destined for a specific IP range, down the tunnel.\nSplit tunneling can be useful when you want to access devices on the other end of the VPN tunnel, but don\u0026rsquo;t want to tunnel all of your normal traffic (e.g. web browsing).\nThis can be achieved easily by changing the allowedIPs subnet of the peer side.\nAt the moment, it is set to a wildcard:\nAllowedIPs = 0.0.0.0/0 But it can be modified, e.g. if you only want to route packets for a few specific subnets:\nAllowedIPs = 10.0.10.0/24, 172.16.0.0/26 Diagnostics The sudo wg command can be used to used to see diagnostic data, useful for troubleshooting.\nConclusion Thats it! You should now have a working Wireguard VPN tunnel on your EdgeRouter.\n","permalink":"https://blog.usman.network/posts/wireguard-vpn-on-a-ubiquiti-edgerouter/","summary":"What is Wireguard? WireGuard is an extremely simple yet fast and modern VPN that utilizes modern cryptography. It aims to be faster, simpler, leaner, and more useful than alternatives such as IPsec \u0026amp; OpenVPN.\nWireGuard\u0026rsquo;s codebase has only 4,000 lines of code, which is considerably less than OpenVPN\u0026rsquo;s, which has 600,000.\nWireGuard\u0026rsquo;s Performance WireGuard\u0026rsquo;s speed and elegance are the main reasons for its popularity, it is significantly faster than OpenVPN \u0026amp; IPsec - in terms of raw throughput, authentication speed and latency.","title":"Wireguard VPN on a Ubiquiti EdgeRouter"}]